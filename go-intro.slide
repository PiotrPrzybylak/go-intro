Go 
 Wprowadzenie do Go i praktyczny przegląd języka 

Piotr Przybylak
Senior Software Developer, RnDity
piotr.przybylak@rndity.com
@PiotrPrzybylak
http://www.linkedin.com/in/piotrprzybylak

* Agenda
- Korzenie Go
- Wybrane elementy języka
- Wrażenia po roku z Go

.background images/lama_wallpaper.png

* Skąd wzięło się Go

Język Go powstał w 2009 w Google.
Jego autorami byli:

- Robert Griesemer
- Rob Pike
- Ken Thompson

Później dołączyli:

- Russ Cox
- Ian Lance Taylor

Wersja 1.0 została wydana w 2012 roku

.background images/clean_wallpaper.jpg

* Dlaczego powstało Go

Autorzy twierdzą, że wymyślili język Go czekając aż skompiluje się kod serwera nad którym pracowali ;)

.background images/clean_wallpaper.jpg

Google posiada:

- Olbrzymią ilość kodu w Javie i C++
- Rozwijanego przez olbrzymią ilość programistów
- Uruchamianego na olbrzymiej ilości serwerów

* Problemy Google

Istniejące narzędzia nie były budowane z myślą o rozproszonych systemach wielkiej skali

- Za wolno działają
- Za wolno sie kompilują
- Są za trudne i zbyt skomplikowane

.background images/clean_wallpaper.jpg

* Założenia projektu Go

- Wydajne działanie
- Wydajna kompilacja
- Łatwość użycia

.background images/clean_wallpaper.jpg

* Hello World!

.play hello1.go

.background images/slide_wallpaper.jpg

* Prawdziwe Hello World!

.play hello2.go

.background images/clean_wallpaper.jpg

* I jeszcze jeden przykład

.play hello3.go

* Wygląda znajomo?

- Go nie ma ambicji być przełomowym językiem
- Jest za to w miarę nowym językiem
- C XXI wieku? = C + strings + garbage collection + concurrency

Podobnie jak C Go jest:

- Statycznie typowane
- Proceduralne
- Kompilowane
- Oparte o wskaźniki

.background images/clean_wallpaper.jpg

* Go w Google

.image images/go_w_google_zaznaczenie.png _ 970

* Przodkowie Go

.image images/origins_of_go_graph.png 510 _

Źródło: The Go Programming Language (Alan Donovan,‎ Brian Kernighan)

.background images/clean_wallpaper.jpg


* Dlaczego warto poznać Go
* Prostota
* Wydajne działanie i kompilacja
* Łatwa współbieżność
* Wbudowana obsługa standardów sieciowych
- HTTP
- gRPC
- JSON
- XML

.play server.go



* Gotowe narzędzia (budowanie, testowanie, formatowanie)
* Pedantyczność kompilatora (nieużywane importy, zmienne)
* Jeden sposób formatowania kodu
* Kompozycja zamiast dziedziczenia
* Wieloplatformowość
* Wieloparametrowe wyniki funkcji
* Funkcje jako koncept pierwszej kategorii
* Wspieranie wielu platform
* Bezpieczne szablony HTML

Strictly Contextually Auto-Escaping Template Engines - zabezpieczenie przed XSS

.background images/clean_wallpaper.jpg

* Go wspiera użycie IDE ale go nie wymaga

- Goland / Vim w RnDity: 50 / 50

.background images/clean_wallpaper.jpg

* Kontrowersyjne elementy

* GOPATH
.image images/gopath.png

Źródło: http://www.musingscafe.com/get-going-with-golang-workspace-gopath-install-and-vendoring-part-1/

.background images/clean_wallpaper.jpg

* Vendorowanie
.image images/vendor.png 550 _

.background images/clean_wallpaper.jpg

* Zależności i pakiety
- System zależności oparty o mono repo Google

.background images/clean_wallpaper.jpg

* Obsługa błędów

 if err != nil {
    return err
 }

.background images/clean_wallpaper.jpg

* Obsługa błędów - bez wyjątków jednak ani rusz

- Funckcja panic()

.background images/clean_wallpaper.jpg

* Obiektowość bez dziedziczenia

* Metody

.play methods.go

* Interfejsy

 type geometry interface {
    area() float64
    perim() float64
 }

* Structural type system

.play interface_implementation.go

.background images/clean_wallpaper.jpg

* Kompozycja

.play composition.go

.background images/clean_wallpaper.jpg

* Pusty interfejs

.play empty_interface.go

* Brak Generycznych Generyków

 type Stack struct {
        items     []interface{}
        lastIndex int
 }

Generyczność jest zarezerwowana dla wbudowanych kolekcji

 type IntStack struct {
         items     []int{}
         lastIndex int
 }

.background images/clean_wallpaper.jpg

* Hermetyzacja poprzez nazwy

* Jak Go sprawdza się w małych projektach
